// Code generated by MockGen. DO NOT EDIT.
// Source: repository/company_user.go
//
// Generated by this command:
//
//	mockgen -source repository/company_user.go -destination mock/repository/company_user.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	model "todo-api/model"

	gomock "go.uber.org/mock/gomock"
)

// MockCompanyUserRepository is a mock of CompanyUserRepository interface.
type MockCompanyUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyUserRepositoryMockRecorder
}

// MockCompanyUserRepositoryMockRecorder is the mock recorder for MockCompanyUserRepository.
type MockCompanyUserRepositoryMockRecorder struct {
	mock *MockCompanyUserRepository
}

// NewMockCompanyUserRepository creates a new mock instance.
func NewMockCompanyUserRepository(ctrl *gomock.Controller) *MockCompanyUserRepository {
	mock := &MockCompanyUserRepository{ctrl: ctrl}
	mock.recorder = &MockCompanyUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyUserRepository) EXPECT() *MockCompanyUserRepositoryMockRecorder {
	return m.recorder
}

// CreateCompanyUsers mocks base method.
func (m *MockCompanyUserRepository) CreateCompanyUsers(companyUsers []*model.CompanyUser) ([]*model.CompanyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompanyUsers", companyUsers)
	ret0, _ := ret[0].([]*model.CompanyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompanyUsers indicates an expected call of CreateCompanyUsers.
func (mr *MockCompanyUserRepositoryMockRecorder) CreateCompanyUsers(companyUsers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompanyUsers", reflect.TypeOf((*MockCompanyUserRepository)(nil).CreateCompanyUsers), companyUsers)
}

// GetCompanyUser mocks base method.
func (m *MockCompanyUserRepository) GetCompanyUser(companyId, userId uint) (*model.CompanyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyUser", companyId, userId)
	ret0, _ := ret[0].(*model.CompanyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyUser indicates an expected call of GetCompanyUser.
func (mr *MockCompanyUserRepositoryMockRecorder) GetCompanyUser(companyId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyUser", reflect.TypeOf((*MockCompanyUserRepository)(nil).GetCompanyUser), companyId, userId)
}
