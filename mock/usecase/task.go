// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/task.go
//
// Generated by this command:
//
//	mockgen -source usecase/task.go -destination mock/usecase/task.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	model "todo-api/model"

	gomock "go.uber.org/mock/gomock"
)

// MockTaskUseCase is a mock of TaskUseCase interface.
type MockTaskUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTaskUseCaseMockRecorder
}

// MockTaskUseCaseMockRecorder is the mock recorder for MockTaskUseCase.
type MockTaskUseCaseMockRecorder struct {
	mock *MockTaskUseCase
}

// NewMockTaskUseCase creates a new mock instance.
func NewMockTaskUseCase(ctrl *gomock.Controller) *MockTaskUseCase {
	mock := &MockTaskUseCase{ctrl: ctrl}
	mock.recorder = &MockTaskUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskUseCase) EXPECT() *MockTaskUseCaseMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskUseCase) CreateTask(task *model.Task) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", task)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskUseCaseMockRecorder) CreateTask(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskUseCase)(nil).CreateTask), task)
}

// CreateTaskByAdmin mocks base method.
func (m *MockTaskUseCase) CreateTaskByAdmin(task *model.Task) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskByAdmin", task)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaskByAdmin indicates an expected call of CreateTaskByAdmin.
func (mr *MockTaskUseCaseMockRecorder) CreateTaskByAdmin(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskByAdmin", reflect.TypeOf((*MockTaskUseCase)(nil).CreateTaskByAdmin), task)
}

// DeleteTask mocks base method.
func (m *MockTaskUseCase) DeleteTask(companyId, taskId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", companyId, taskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskUseCaseMockRecorder) DeleteTask(companyId, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskUseCase)(nil).DeleteTask), companyId, taskId)
}

// DeleteTaskByAdmin mocks base method.
func (m *MockTaskUseCase) DeleteTaskByAdmin(taskId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskByAdmin", taskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskByAdmin indicates an expected call of DeleteTaskByAdmin.
func (mr *MockTaskUseCaseMockRecorder) DeleteTaskByAdmin(taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskByAdmin", reflect.TypeOf((*MockTaskUseCase)(nil).DeleteTaskByAdmin), taskId)
}

// GetTask mocks base method.
func (m *MockTaskUseCase) GetTask(companyId, taskId uint) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", companyId, taskId)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTaskUseCaseMockRecorder) GetTask(companyId, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTaskUseCase)(nil).GetTask), companyId, taskId)
}

// GetTasks mocks base method.
func (m *MockTaskUseCase) GetTasks(limit, offset int) ([]*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", limit, offset)
	ret0, _ := ret[0].([]*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockTaskUseCaseMockRecorder) GetTasks(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockTaskUseCase)(nil).GetTasks), limit, offset)
}

// GetTasksByCompanyId mocks base method.
func (m *MockTaskUseCase) GetTasksByCompanyId(companyId uint, limit, offset int) ([]*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByCompanyId", companyId, limit, offset)
	ret0, _ := ret[0].([]*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByCompanyId indicates an expected call of GetTasksByCompanyId.
func (mr *MockTaskUseCaseMockRecorder) GetTasksByCompanyId(companyId, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByCompanyId", reflect.TypeOf((*MockTaskUseCase)(nil).GetTasksByCompanyId), companyId, limit, offset)
}

// UpdateTask mocks base method.
func (m *MockTaskUseCase) UpdateTask(companyId, taskId uint, task *model.Task) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", companyId, taskId, task)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskUseCaseMockRecorder) UpdateTask(companyId, taskId, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskUseCase)(nil).UpdateTask), companyId, taskId, task)
}

// UpdateTaskByAdmin mocks base method.
func (m *MockTaskUseCase) UpdateTaskByAdmin(taskId uint, task *model.Task) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskByAdmin", taskId, task)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskByAdmin indicates an expected call of UpdateTaskByAdmin.
func (mr *MockTaskUseCaseMockRecorder) UpdateTaskByAdmin(taskId, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskByAdmin", reflect.TypeOf((*MockTaskUseCase)(nil).UpdateTaskByAdmin), taskId, task)
}
